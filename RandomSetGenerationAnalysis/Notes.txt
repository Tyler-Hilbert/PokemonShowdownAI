Notes For Trying To Collect Data On Random Set Distribution:

In order to collect enough data I need to find a way to automate using the random team generator and then parsing out the generated sets.

Since Pokemon Showdown is open source I was able to find the source code -- https://github.com/smogon/pokemon-showdown

I looked through the file structure and noticed that there are multiple similar files that look like they are used to generate the random teams. For example:
https://github.com/smogon/pokemon-showdown/blob/master/data/random-teams.ts
https://github.com/smogon/pokemon-showdown/blob/master/data/mods/gen4/random-teams.ts
I wasn't sure which one to use, so I started adding console.log statements in to debug.
I found that it wasn't obvious what was being run. I think it is possible that some of the files in the code are unused.

Next what I did was look directly at the ./pokemon-showdown script. I noticed that there is an argument to generate a team:
`./pokemon-showdown generate-team [FORMAT-ID [RANDOM-SEED]]`
When run it produces an output like this:
`Machamp||flameorb|guts|bulletpunch,closecombat,knockoff,facade||85,85,85,85,85,85||||84|]Groudon||leftovers|drought|earthquake,heavyslam,stealthrock,stoneedge||85,85,85,85,85,85|N|||72|]Poliwrath||lifeorb|swiftswim|darkestlariat,closecombat,raindance,liquidation||85,85,85,85,85,85||||84|]Whiscash||choiceband|oblivious|stoneedge,earthquake,liquidation,zenheadbutt||85,85,85,85,85,85||||88|]Reuniclus||lifeorb|magicguard|focusblast,trickroom,recover,psychic||85,,85,85,85,||,0,,,,0||84|]Talonflame||heavydutyboots|galewings|bravebird,uturn,flareblitz,roost||85,85,85,85,85,85||||82|`
I think this is promising, but I'd like to verify that the generate-team argument will produce the exact same sets and distribution of sets as the actual game server will.

***

I consulted the developers of the software about what the best way to generate random sets identical to the server would be (https://www.smogon.com/forums/threads/gen-1-6-random-battles-complete-list-of-movepools-for-all-pok%C3%A9mon.3643472/post-8571743). I decided the best solution was to use the following command to generate the random sets:
`./pokemon-showdown generate-team gen4randombattle`

I was able to use Python to loop this command an arbitrary number of times and output all generated sets to a file. I decided that for an initial test I would simulate enough teams that statistically each Pokemon should be generated 102 times. This number may or may not have to be adjusted depending on if this is enough data to assume an accurate representation.

The next problem I faced was that the output data was not in a Python friendly format.
To tackle this problem I changed the `pokemon-showdown` file to output in a format that closer resembled a list (a python data structure) of dictionaries (a python data structure). I then wrote a post processing script that would finish turning the outputted data into a data structure native to Python. This allows the data to be loaded into a Python script by importing the file output from the post processor.


***

Eventually I started running into formatting inconsistencies where node would put data that was too long onto a separate line. At this point I decided that I would be better off writing a script that converted the raw output from the modified `pokemon-showdown` file to valid JSON rather than parsing it as plain text.


***

The next issue I ran into was how to analyze the randomly generated sets. I don't have a stats background, so I don't know how much data I need or what to do with it. It was decided at first to run the simulation long enough to hit each pokemon 102 times, but I noticed that some of the pokemon counts drifted by more than 30. I wasn't sure if this was because the sample size wasn't big enough or they were actually being generated 30% less often. I decided to up the simulation to be large enough that each pokemon should statistically be generated 252 times. There is no basis for this number, it just seems large enough to get an accurate sample and the computation time is starting to become more of a nuisance to work with if it is much larger than this.
I also don't know what tools I should use to analyze the set. Currently I'm just doing counts of variables such as number of times a pokemon and each type is generated. I also compute each unique set for each pokemon. Long term I need to figure out what I actually need to analyze.
